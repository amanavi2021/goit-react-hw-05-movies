{"version":3,"file":"static/js/544.87137f2e.chunk.js","mappings":"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","sources":["pages/Home/Home.jsx","services/movies-api.js","../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../node_modules/date-fns/esm/toDate/index.js","../node_modules/date-fns/esm/getYear/index.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { getYear } from 'date-fns';\nimport moviesApiService from 'services/movies-api';\n\nconst Home = () => {\n  const [trandingMovies, setTrandingMovies] = useState([]);\n  const [error, setError] = useState('');\n  const location = useLocation();\n\n  useEffect(() => {\n    async function getTrandingMovies() {\n      try {\n        const movies = await moviesApiService.fetchTrandingMovies();\n        setTrandingMovies(movies.results);\n        setError('');\n\n      } catch (error) {\n        setTrandingMovies([]);\n        setError(error);\n      }\n    }\n    getTrandingMovies();\n  }, []);\n\n  return (\n    <div>\n      <h1>Trending today</h1>\n      {error ? (\n        <p>{error}</p>\n      ) : (\n        <ul>\n          {trandingMovies.map(({ id, title, release_date }) => (\n            <li key={id}>\n              <Link to={`movies/${id}`} state={{ from: location }}>\n                {title} ({getYear(new Date(release_date))})\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import axios from \"axios\";\n\nconst API_KEY = \"0dd8a44a838b85596fd1a072a37c7f7d\";\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\n\nasync function fetchTrandingMovies () {\nconst searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    page:1\n});\n\nconst url=`${BASE_URL}trending/movie/day?${searchParams}`;\n\nconst response = await axios.get(url);\nconst movies = response.data;\nreturn movies;\n\n};\n\nasync function fetchSearchingMovies (queryString) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n        page:1, \n        query: queryString\n\n    });\n    const url=`${BASE_URL}search/movie?${searchParams}`;\n    const response = await axios.get(url);\n    const movies = response.data;\n    return movies;\n    \n    };\n\n    // https://api.themoviedb.org/3/movie/333?language=en-US\nasync function fetchMovie (id) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY\n\n    });\n    \n    const url=`${BASE_URL}movie/${id}?${searchParams}`;\n    const response = await axios.get(url);\n    const movie = response.data;\n    return movie;\n\n};\n\nasync function fetchReviews (id) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n        page: 1\n\n    });\n    // 'https://api.themoviedb.org/3/movie/44/reviews?language=en-US&page=1'\n    const url=`${BASE_URL}movie/${id}/reviews?${searchParams}`;\n    const response = await axios.get(url);\n    const reviews = response.data;\n    return reviews;\n\n};\n\nasync function fetchCast (id) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY\n\n    });\n\n    const url=`${BASE_URL}movie/${id}/credits?${searchParams}`;\n    const response = await axios.get(url);\n    const credits = response.data;\n    return credits;\n\n};\n\nconst api = {fetchTrandingMovies, fetchSearchingMovies, fetchMovie, fetchReviews, fetchCast};\nexport default api;","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\");\n      // eslint-disable-next-line no-console\n      console.warn(new Error().stack);\n    }\n    return new Date(NaN);\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getFullYear();\n}"],"names":["useState","trandingMovies","setTrandingMovies","error","setError","location","useLocation","useEffect","moviesApiService","movies","results","getTrandingMovies","map","id","title","release_date","to","state","from","getYear","Date","API_KEY","BASE_URL","fetchTrandingMovies","searchParams","URLSearchParams","api_key","page","url","axios","response","data","fetchSearchingMovies","queryString","query","fetchMovie","movie","fetchReviews","reviews","fetchCast","credits","api","requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","Object","prototype","toString","call","_typeof","getTime","console","warn","Error","stack","NaN","dirtyDate","getFullYear"],"sourceRoot":""}