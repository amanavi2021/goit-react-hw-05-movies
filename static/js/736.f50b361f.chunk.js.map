{"version":3,"file":"static/js/736.f50b361f.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/movies-api.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const CastItem = styled.li`\nmargin-bottom: 12px;\n`;\n\nexport const ActorName = styled.h4`\nmargin-bottom: 8px;\n`;\n\nexport const ActorPhoto = styled.img`\nborder-radius: 5px;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport moviesApiService from 'services/movies-api';\nimport { CastItem, ActorPhoto, ActorName } from './Cast.styled';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState('');\n  const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n    async function getCast() {\n      try {\n        const credits = await moviesApiService.fetchCast(id);\n      \n        if (credits.cast.length !== 0) {\n          setCast(credits.cast);\n          setError('');\n        } else {\n          setError(\"ü¶∏‚Äç‚ôÇÔ∏è We don't have any cast for this movie\");\n    \n        }\n      } catch (error) {\n        setCast([]);\n        setError(error);\n      }\n    }\n\n    getCast();\n  }, [id]);\n\n  return (\n    <>{\n        error ? <p>{error}</p> \n        :<ul>\n        {cast.map(({ cast_id, character, name, profile_path }) => (\n          <CastItem key={cast_id}>\n            <ActorPhoto\n              src={profile_path ?           \n                   `https://image.tmdb.org/t/p/w500${profile_path}`\n                   : defaultImg}\n              alt={name}\n              width=\"70\"\n            />\n            <ActorName>{name}</ActorName>\n            <p>Charecter: {character}</p>\n          </CastItem>\n        ))}\n      </ul>\n    }\n    </>\n   \n  );\n};\n\nexport default Cast;\n","import axios from \"axios\";\n\nconst API_KEY = \"0dd8a44a838b85596fd1a072a37c7f7d\";\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\n\nasync function fetchTrandingMovies () {\nconst searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    page:1\n});\n\nconst url=`${BASE_URL}trending/movie/day?${searchParams}`;\n\nconst response = await axios.get(url);\nconst movies = response.data;\nreturn movies;\n\n};\n\nasync function fetchSearchingMovies (queryString) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n        page:1, \n        query: queryString\n\n    });\n    const url=`${BASE_URL}search/movie?${searchParams}`;\n    const response = await axios.get(url);\n    const movies = response.data;\n    return movies;\n    \n    };\n\n    // https://api.themoviedb.org/3/movie/333?language=en-US\nasync function fetchMovie (id) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY\n\n    });\n    \n    const url=`${BASE_URL}movie/${id}?${searchParams}`;\n    const response = await axios.get(url);\n    const movie = response.data;\n    return movie;\n\n};\n\nasync function fetchReviews (id) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n        page: 1\n\n    });\n    // 'https://api.themoviedb.org/3/movie/44/reviews?language=en-US&page=1'\n    const url=`${BASE_URL}movie/${id}/reviews?${searchParams}`;\n    const response = await axios.get(url);\n    const reviews = response.data;\n    return reviews;\n\n};\n\nasync function fetchCast (id) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY\n\n    });\n\n    const url=`${BASE_URL}movie/${id}/credits?${searchParams}`;\n    const response = await axios.get(url);\n    const credits = response.data;\n    return credits;\n\n};\n\nconst api = {fetchTrandingMovies, fetchSearchingMovies, fetchMovie, fetchReviews, fetchCast};\nexport default api;"],"names":["CastItem","styled","ActorName","ActorPhoto","id","useParams","useState","cast","setCast","error","setError","useEffect","moviesApiService","credits","length","getCast","map","cast_id","character","name","profile_path","src","alt","width","API_KEY","BASE_URL","fetchTrandingMovies","searchParams","URLSearchParams","api_key","page","url","axios","response","movies","data","fetchSearchingMovies","queryString","query","fetchMovie","movie","fetchReviews","reviews","fetchCast","api"],"sourceRoot":""}