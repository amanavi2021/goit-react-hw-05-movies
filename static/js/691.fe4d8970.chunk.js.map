{"version":3,"file":"static/js/691.fe4d8970.chunk.js","mappings":"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","sources":["pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx","services/movies-api.js","../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../node_modules/date-fns/esm/toDate/index.js","../node_modules/date-fns/esm/getYear/index.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  margin-bottom: 20px;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n// width: 100%;\n//   font: inherit;\n  font-size: 20px;\n  border:  2px solid black;\n  border-radius: 5px;\n  outline: none;\n  padding: 3\n  padding-left: 4px;\n  padding-right: 4px;\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n\n  &::placeholder {\n  font: inherit;\n  font-size: 16px;\n  }\n  &:hover, &:focus {\n    border-color: skyblue;\n  }\n\n`;\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 65px;\n  height: 30px;\n  border: 1px solid black;\n  border-radius: 5px;\n  margin-left: 8px;\n  font-size: 15px;\n  \n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n   \n  &:hover {\n    opacity: 1;\n  }\n`;","import { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { getYear } from 'date-fns';\nimport moviesApiService from 'services/movies-api';\nimport { SearchFormInput, SearchFormButton, SearchForm } from './Movies.styled';\n\nconst Movies = () => {\n  const [searchingMovies, setSearchingMovies] = useState([]);\n  const [error, setError] = useState('');\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const updateQueryString = event => {\n    const newQuery = event.currentTarget.value.toLowerCase();\n    const newParams = newQuery !== '' ? { query: newQuery } : {};\n    setSearchParams(newParams);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (query.trim() === '') {\n      return alert('ü¶Ñ Please enter text to search movies');\n    }\n    setSearchParams({ query: query });\n  };\n\n  useEffect(() => {\n    async function getSearchingMovies() {\n      try {\n        const movies = await moviesApiService.fetchSearchingMovies(query);\n        if (movies.results.length !== 0) {\n          setSearchingMovies(movies.results);\n          setError('');\n        } else {\n          setError('üôÖ‚Äç‚ôÄÔ∏è Unfortunately there are no such movies');\n        }\n      } catch (error) {\n        setSearchingMovies([]);\n        setError(error);\n      }\n    }\n    if (query) {\n      getSearchingMovies();\n    }\n  }, [query]);\n\n  return (\n    <div>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormInput\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movie\"\n          value={query}\n          onChange={updateQueryString}\n        />\n        <SearchFormButton type=\"submit\">\n          <span>Search</span>\n        </SearchFormButton>\n      </SearchForm>\n      {error ? (\n        <p>{error}</p>\n      ) : (\n        <ul>\n          {searchingMovies.map(({ id, title, release_date }) => (\n            <li key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                {title} ({getYear(new Date(release_date))}) \n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from \"axios\";\n\nconst API_KEY = \"0dd8a44a838b85596fd1a072a37c7f7d\";\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\n\nasync function fetchTrandingMovies () {\nconst searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    page:1\n});\n\nconst url=`${BASE_URL}trending/movie/day?${searchParams}`;\n\nconst response = await axios.get(url);\nconst movies = response.data;\nreturn movies;\n\n};\n\nasync function fetchSearchingMovies (queryString) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n        page:1, \n        query: queryString\n\n    });\n    const url=`${BASE_URL}search/movie?${searchParams}`;\n    const response = await axios.get(url);\n    const movies = response.data;\n    return movies;\n    \n    };\n\nasync function fetchMovie (id) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY\n\n    });\n    \n    const url=`${BASE_URL}movie/${id}?${searchParams}`;\n    const response = await axios.get(url);\n    const movie = response.data;\n    return movie;\n\n};\n\nasync function fetchReviews (id) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n        page: 1\n\n    });\n    const url=`${BASE_URL}movie/${id}/reviews?${searchParams}`;\n    const response = await axios.get(url);\n    const reviews = response.data;\n    return reviews;\n\n};\n\nasync function fetchCast (id) {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY\n\n    });\n\n    const url=`${BASE_URL}movie/${id}/credits?${searchParams}`;\n    const response = await axios.get(url);\n    const credits = response.data;\n    return credits;\n\n};\n\nconst api = {fetchTrandingMovies, fetchSearchingMovies, fetchMovie, fetchReviews, fetchCast};\nexport default api;","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\");\n      // eslint-disable-next-line no-console\n      console.warn(new Error().stack);\n    }\n    return new Date(NaN);\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getYear\n * @category Year Helpers\n * @summary Get the year of the given date.\n *\n * @description\n * Get the year of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which year is 2 July 2014?\n * const result = getYear(new Date(2014, 6, 2))\n * //=> 2014\n */\nexport default function getYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getFullYear();\n}"],"names":["SearchForm","styled","SearchFormInput","SearchFormButton","useState","searchingMovies","setSearchingMovies","error","setError","location","useLocation","useSearchParams","searchParams","setSearchParams","query","get","useEffect","moviesApiService","movies","results","length","getSearchingMovies","onSubmit","event","preventDefault","trim","alert","type","autoComplete","autoFocus","placeholder","value","onChange","newQuery","currentTarget","toLowerCase","map","id","title","release_date","to","state","from","getYear","Date","API_KEY","BASE_URL","fetchTrandingMovies","URLSearchParams","api_key","page","url","axios","response","data","fetchSearchingMovies","queryString","fetchMovie","movie","fetchReviews","reviews","fetchCast","credits","api","requiredArgs","required","args","TypeError","toDate","argument","arguments","argStr","Object","prototype","toString","call","_typeof","getTime","console","warn","Error","stack","NaN","dirtyDate","getFullYear"],"sourceRoot":""}